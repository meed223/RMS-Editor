package com.meed223.rms_editor.map;



import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.meed223.rms_editor.map.elements.Cliff;
import com.meed223.rms_editor.map.elements.Connection;
import com.meed223.rms_editor.map.elements.Elevation;
import com.meed223.rms_editor.map.elements.Land;
import com.meed223.rms_editor.map.elements.MapConst;
import com.meed223.rms_editor.map.elements.Object;
import com.meed223.rms_editor.map.elements.Player;
import com.meed223.rms_editor.map.elements.Terrain;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@EqualsAndHashCode
public class RMS {
    /* Object Info */
    public String mapName;
    private GameType game;

    /* RMS Map Constants */
    public ArrayList<MapConst> mapConsts;
    private String baseTerrain;
    public Map<String, Long> terrainDefs;
    public Map<String, Long> objectDefs;

    /* RMS Generation Objects */
    private Player player;
    private List<Land> landGeneration;
    private List<Terrain> terrainGeneration;
    private List<Object> objectGeneration;
    private List<Elevation> elevationGeneration;
    private List<Connection> teamConnectionGeneration;
    private List<Connection> playerConnectionGeneration;
    private List<Connection> allLandConnectionGeneration;
    private Cliff cliffGeneration;

    /* Constructor(s) */
    public RMS() {
        // Object info
        mapName = null;

        // Map constants
        mapConsts = new ArrayList<>();
        baseTerrain = null;

        // Generation objects
        player = new Player();
        landGeneration = new ArrayList<>();
        terrainGeneration = new ArrayList<>();
        objectGeneration = new ArrayList<>();
        elevationGeneration = new ArrayList<>();
        teamConnectionGeneration = new ArrayList<>();
        playerConnectionGeneration = new ArrayList<>();
        allLandConnectionGeneration = new ArrayList<>();
        cliffGeneration = new Cliff();
    }

    /* Update Game Type */
    public void updateGameType(GameType newType) {
    	if (game == newType) {
    		return;
    	}
    	
    }

    /* Generate RMS */
    @Override
    public String toString() {
        StringBuilder rms = new StringBuilder();
        // TODO loop through const. maps to define constants

        /* Map information */
        rms.append("/* ===[ ");
        rms.append(mapName);
        rms.append(" ]=== */\n");
        rms.append("/* Generated by Meed223's RMS Editor */\n\n");

        /* Map Constants */
        rms.append("/* ---[ Map Constants ]--- */\n");
        for (MapConst mapConst : mapConsts) {
            rms.append(mapConst.toString());
        }


        /* <PLAYER_SETUP> */
        rms.append(player.toString());

        /* <LAND_GENERATION> */
        rms.append("\n<LAND_GENERATION>\n");
        rms.append("\nbase_terrain ");
        rms.append(baseTerrain);
        rms.append("\n");
        for (Land land : landGeneration) {
            rms.append(land.toString());
        }

        /* <ELEVATION_GENERATION> */
        rms.append("\n<ELEVATION_GENERATION>\n");
        for (Elevation elevation : elevationGeneration) {
            rms.append(elevation.toString());
        }

        /* <CLIFF_GENERATION> */
        rms.append(cliffGeneration.toString());

        /* <TERRAIN_GENERATION> */
        rms.append("\n<TERRAIN_GENERATION>\n");
        for (Terrain terrain : terrainGeneration) {
            rms.append(terrain.toString());
        }

        /* <CONNECTION_GENERATION> */
        rms.append("\n<CONNECTION_GENERATION>\n");
        rms.append("\ncreate_connect_teams_lands {");
        for (Connection connection : teamConnectionGeneration) {
            rms.append(connection.toString());
        }
        rms.append("\n}");
        rms.append("\ncreate_connect_all_players_lands {");
        for (Connection connection : playerConnectionGeneration) {
            rms.append(connection.toString());
        }
        rms.append("\n}");
        rms.append("\ncreate_connect_all_lands {");
        for (Connection connection : allLandConnectionGeneration) {
            rms.append(connection.toString());
        }
        rms.append("\n}\n");

        /* <OBJECTS_GENERATION> */
        rms.append("\n<OBJECT_GENERATION>\n");
        for (Object object : objectGeneration) {
            rms.append(object.toString());
        }

        return rms.toString();
    }
}
